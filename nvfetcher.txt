-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate nix sources expr for the latest version of packages
--   
--   Please see README
@package nvfetcher
@version 0.2.0.0


-- | Types used in this program.
module NvFetcher.Types

-- | Package version
newtype Version
Version :: Text -> Version

-- | Check sum, sha256, sri or base32, etc.
newtype Checksum
Checksum :: Text -> Checksum

-- | Git branch (<a>Nothing</a>: master)
newtype Branch
Branch :: Maybe Text -> Branch

-- | Nix expression
type NixExpr = Text

-- | Version change of a package
--   
--   <pre>
--   &gt;&gt;&gt; VersionChange "foo" Nothing "2.3.3"
--   foo: ∅ → 2.3.3
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; VersionChange "bar" (Just "2.2.2") "2.3.3"
--   bar: 2.2.2 → 2.3.3
--   </pre>
data VersionChange
VersionChange :: PackageName -> Maybe Version -> Version -> VersionChange
[vcName] :: VersionChange -> PackageName
[vcOld] :: VersionChange -> Maybe Version
[vcNew] :: VersionChange -> Version

-- | Decorate a rule's key with <a>PackageKey</a>
newtype WithPackageKey k
WithPackageKey :: (k, PackageKey) -> WithPackageKey k
data VersionSortMethod
ParseVersion :: VersionSortMethod
Vercmp :: VersionSortMethod

-- | Filter-like configuration for some version sources. See
--   <a>https://nvchecker.readthedocs.io/en/latest/usage.html#list-options</a>
--   for details.
data ListOptions
ListOptions :: Maybe Text -> Maybe Text -> Maybe VersionSortMethod -> Maybe Text -> ListOptions
[_includeRegex] :: ListOptions -> Maybe Text
[_excludeRegex] :: ListOptions -> Maybe Text
[_sortVersionKey] :: ListOptions -> Maybe VersionSortMethod
[_ignored] :: ListOptions -> Maybe Text

-- | Upstream version source for nvchecker to check
data VersionSource
GitHubRelease :: Text -> Text -> VersionSource
[_owner] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
GitHubTag :: Text -> Text -> ListOptions -> VersionSource
[_owner] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions
Git :: Text -> Branch -> VersionSource
[_vurl] :: VersionSource -> Text
[_vbranch] :: VersionSource -> Branch
Pypi :: Text -> VersionSource
[_pypi] :: VersionSource -> Text
ArchLinux :: Text -> VersionSource
[_archpkg] :: VersionSource -> Text
Aur :: Text -> VersionSource
[_aur] :: VersionSource -> Text
Manual :: Text -> VersionSource
[_manual] :: VersionSource -> Text
Repology :: Text -> Text -> VersionSource
[_repology] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
Webpage :: Text -> Text -> ListOptions -> VersionSource
[_vurl] :: VersionSource -> Text
[_regex] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions
HttpHeader :: Text -> Text -> ListOptions -> VersionSource
[_vurl] :: VersionSource -> Text
[_regex] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions

-- | The result of running nvchecker
data NvcheckerA
NvcheckerA :: Version -> Maybe Version -> NvcheckerA
[nvNow] :: NvcheckerA -> Version

-- | nvchecker doesn't give this value, but shake restores it from last run
[nvOld] :: NvcheckerA -> Maybe Version

-- | The input of nvchecker
data NvcheckerQ
NvcheckerQ :: VersionSource -> NvcheckerOptions -> NvcheckerQ

-- | Configuration available for evey version sourece. See
--   <a>https://nvchecker.readthedocs.io/en/latest/usage.html#global-options</a>
--   for details.
data NvcheckerOptions
NvcheckerOptions :: Maybe Text -> Maybe Text -> Maybe Text -> NvcheckerOptions
[_stripPrefix] :: NvcheckerOptions -> Maybe Text
[_fromPattern] :: NvcheckerOptions -> Maybe Text
[_toPattern] :: NvcheckerOptions -> Maybe Text

-- | If the package is prefetched, then we can obtain the SHA256
data NixFetcher (k :: FetchStatus)
FetchGit :: Text -> Version -> Bool -> Bool -> Bool -> FetchResult k -> NixFetcher (k :: FetchStatus)
[_furl] :: NixFetcher (k :: FetchStatus) -> Text
[_rev] :: NixFetcher (k :: FetchStatus) -> Version
[_deepClone] :: NixFetcher (k :: FetchStatus) -> Bool
[_fetchSubmodules] :: NixFetcher (k :: FetchStatus) -> Bool
[_leaveDotGit] :: NixFetcher (k :: FetchStatus) -> Bool
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult k
FetchUrl :: Text -> FetchResult k -> NixFetcher (k :: FetchStatus)
[_furl] :: NixFetcher (k :: FetchStatus) -> Text
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult k

-- | Prefetched fetchers hold hashes
type family FetchResult (k :: FetchStatus)

-- | Fetch status
data FetchStatus
Fresh :: FetchStatus
Fetched :: FetchStatus

-- | Extract file contents from package source e.g. <tt>Cargo.lock</tt>
data ExtractSrcQ
ExtractSrcQ :: NixFetcher Fetched -> [FilePath] -> ExtractSrcQ

-- | Fetch <tt>outputHashes</tt> for git dependencies in
--   <tt>Cargo.lock</tt>. See
--   <a>https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/rust.section.md#importing-a-cargolock-file</a>
--   for details. We need fetched source and the file path to
--   <tt>Cargo.lock</tt>.
data FetchRustGitDepsQ
FetchRustGitDepsQ :: NixFetcher Fetched -> FilePath -> FetchRustGitDepsQ

-- | The key type of nvfetcher rule. See <a>NvFetcher.Core</a>
data Core
Core :: Core

-- | Package name, used in generating nix expr
type PackageName = Text

-- | How to create package source fetcher given a version
type PackageFetcher = Version -> NixFetcher Fresh
newtype PackageExtractSrc
PackageExtractSrc :: [FilePath] -> PackageExtractSrc
newtype PackageCargoFilePath
PackageCargoFilePath :: FilePath -> PackageCargoFilePath

-- | A package is defined with:
--   
--   <ol>
--   <li>its name</li>
--   <li>how to track its version</li>
--   <li>how to fetch it as we have the version</li>
--   <li>optional file paths to extract (dump to generated nix expr)</li>
--   <li><tt>Cargo.lock</tt> path (if it's a rust package)</li>
--   </ol>
--   
--   <i>INVARIANT: <a>Version</a> passed to <a>PackageFetcher</a> MUST be
--   used textually,</i> <i>i.e. can only be concatenated with other
--   strings,</i> <i>in case we can't check the equality between fetcher
--   functions.</i>
data Package
Package :: PackageName -> NvcheckerQ -> PackageFetcher -> PackageExtractSrc -> Maybe PackageCargoFilePath -> Package
[_pname] :: Package -> PackageName
[_pversion] :: Package -> NvcheckerQ
[_pfetcher] :: Package -> PackageFetcher
[_pextract] :: Package -> PackageExtractSrc
[_pcargo] :: Package -> Maybe PackageCargoFilePath

-- | Package key is the name of a package. We use this type to index
--   packages.
newtype PackageKey
PackageKey :: PackageName -> PackageKey
instance Control.DeepSeq.NFData NvFetcher.Types.Version
instance Data.Binary.Class.Binary NvFetcher.Types.Version
instance Data.Hashable.Class.Hashable NvFetcher.Types.Version
instance GHC.Generics.Generic NvFetcher.Types.Version
instance Data.Aeson.Types.ToJSON.ToJSON NvFetcher.Types.Version
instance Data.Aeson.Types.FromJSON.FromJSON NvFetcher.Types.Version
instance GHC.Base.Monoid NvFetcher.Types.Version
instance GHC.Base.Semigroup NvFetcher.Types.Version
instance Data.String.IsString NvFetcher.Types.Version
instance GHC.Classes.Ord NvFetcher.Types.Version
instance GHC.Show.Show NvFetcher.Types.Version
instance GHC.Classes.Eq NvFetcher.Types.Version
instance Control.DeepSeq.NFData NvFetcher.Types.Checksum
instance Data.Binary.Class.Binary NvFetcher.Types.Checksum
instance Data.Hashable.Class.Hashable NvFetcher.Types.Checksum
instance GHC.Generics.Generic NvFetcher.Types.Checksum
instance GHC.Classes.Ord NvFetcher.Types.Checksum
instance GHC.Classes.Eq NvFetcher.Types.Checksum
instance GHC.Show.Show NvFetcher.Types.Checksum
instance Control.DeepSeq.NFData NvFetcher.Types.Branch
instance Data.Binary.Class.Binary NvFetcher.Types.Branch
instance Data.Hashable.Class.Hashable NvFetcher.Types.Branch
instance GHC.Generics.Generic NvFetcher.Types.Branch
instance Data.Default.Class.Default NvFetcher.Types.Branch
instance GHC.Classes.Ord NvFetcher.Types.Branch
instance GHC.Classes.Eq NvFetcher.Types.Branch
instance GHC.Show.Show NvFetcher.Types.Branch
instance Control.DeepSeq.NFData NvFetcher.Types.VersionSortMethod
instance Data.Binary.Class.Binary NvFetcher.Types.VersionSortMethod
instance Data.Hashable.Class.Hashable NvFetcher.Types.VersionSortMethod
instance GHC.Generics.Generic NvFetcher.Types.VersionSortMethod
instance GHC.Enum.Enum NvFetcher.Types.VersionSortMethod
instance GHC.Classes.Ord NvFetcher.Types.VersionSortMethod
instance GHC.Classes.Eq NvFetcher.Types.VersionSortMethod
instance Data.Default.Class.Default NvFetcher.Types.ListOptions
instance Control.DeepSeq.NFData NvFetcher.Types.ListOptions
instance Data.Binary.Class.Binary NvFetcher.Types.ListOptions
instance Data.Hashable.Class.Hashable NvFetcher.Types.ListOptions
instance GHC.Generics.Generic NvFetcher.Types.ListOptions
instance GHC.Classes.Ord NvFetcher.Types.ListOptions
instance GHC.Classes.Eq NvFetcher.Types.ListOptions
instance GHC.Show.Show NvFetcher.Types.ListOptions
instance Data.Default.Class.Default NvFetcher.Types.NvcheckerOptions
instance Control.DeepSeq.NFData NvFetcher.Types.NvcheckerOptions
instance Data.Binary.Class.Binary NvFetcher.Types.NvcheckerOptions
instance Data.Hashable.Class.Hashable NvFetcher.Types.NvcheckerOptions
instance GHC.Generics.Generic NvFetcher.Types.NvcheckerOptions
instance GHC.Classes.Ord NvFetcher.Types.NvcheckerOptions
instance GHC.Classes.Eq NvFetcher.Types.NvcheckerOptions
instance GHC.Show.Show NvFetcher.Types.NvcheckerOptions
instance Control.DeepSeq.NFData NvFetcher.Types.VersionSource
instance Data.Binary.Class.Binary NvFetcher.Types.VersionSource
instance Data.Hashable.Class.Hashable NvFetcher.Types.VersionSource
instance GHC.Generics.Generic NvFetcher.Types.VersionSource
instance GHC.Classes.Ord NvFetcher.Types.VersionSource
instance GHC.Classes.Eq NvFetcher.Types.VersionSource
instance GHC.Show.Show NvFetcher.Types.VersionSource
instance Control.DeepSeq.NFData NvFetcher.Types.NvcheckerQ
instance Data.Binary.Class.Binary NvFetcher.Types.NvcheckerQ
instance Data.Hashable.Class.Hashable NvFetcher.Types.NvcheckerQ
instance GHC.Generics.Generic NvFetcher.Types.NvcheckerQ
instance GHC.Classes.Ord NvFetcher.Types.NvcheckerQ
instance GHC.Classes.Eq NvFetcher.Types.NvcheckerQ
instance GHC.Show.Show NvFetcher.Types.NvcheckerQ
instance Control.DeepSeq.NFData NvFetcher.Types.NvcheckerA
instance Data.Binary.Class.Binary NvFetcher.Types.NvcheckerA
instance Data.Hashable.Class.Hashable NvFetcher.Types.NvcheckerA
instance GHC.Generics.Generic NvFetcher.Types.NvcheckerA
instance GHC.Classes.Eq NvFetcher.Types.NvcheckerA
instance GHC.Show.Show NvFetcher.Types.NvcheckerA
instance GHC.Generics.Generic (NvFetcher.Types.NixFetcher k)
instance GHC.Generics.Generic NvFetcher.Types.ExtractSrcQ
instance Data.Binary.Class.Binary NvFetcher.Types.ExtractSrcQ
instance Control.DeepSeq.NFData NvFetcher.Types.ExtractSrcQ
instance Data.Hashable.Class.Hashable NvFetcher.Types.ExtractSrcQ
instance GHC.Classes.Ord NvFetcher.Types.ExtractSrcQ
instance GHC.Classes.Eq NvFetcher.Types.ExtractSrcQ
instance GHC.Show.Show NvFetcher.Types.ExtractSrcQ
instance GHC.Generics.Generic NvFetcher.Types.FetchRustGitDepsQ
instance Data.Binary.Class.Binary NvFetcher.Types.FetchRustGitDepsQ
instance Control.DeepSeq.NFData NvFetcher.Types.FetchRustGitDepsQ
instance Data.Hashable.Class.Hashable NvFetcher.Types.FetchRustGitDepsQ
instance GHC.Classes.Ord NvFetcher.Types.FetchRustGitDepsQ
instance GHC.Classes.Eq NvFetcher.Types.FetchRustGitDepsQ
instance GHC.Show.Show NvFetcher.Types.FetchRustGitDepsQ
instance GHC.Classes.Eq NvFetcher.Types.VersionChange
instance Control.DeepSeq.NFData NvFetcher.Types.PackageKey
instance Data.Binary.Class.Binary NvFetcher.Types.PackageKey
instance Data.Hashable.Class.Hashable NvFetcher.Types.PackageKey
instance GHC.Generics.Generic NvFetcher.Types.PackageKey
instance GHC.Classes.Ord NvFetcher.Types.PackageKey
instance GHC.Show.Show NvFetcher.Types.PackageKey
instance GHC.Classes.Eq NvFetcher.Types.PackageKey
instance Control.DeepSeq.NFData NvFetcher.Types.Core
instance Data.Binary.Class.Binary NvFetcher.Types.Core
instance Data.Hashable.Class.Hashable NvFetcher.Types.Core
instance GHC.Generics.Generic NvFetcher.Types.Core
instance GHC.Classes.Ord NvFetcher.Types.Core
instance GHC.Show.Show NvFetcher.Types.Core
instance GHC.Classes.Eq NvFetcher.Types.Core
instance Control.DeepSeq.NFData k => Control.DeepSeq.NFData (NvFetcher.Types.WithPackageKey k)
instance Data.Binary.Class.Binary k => Data.Binary.Class.Binary (NvFetcher.Types.WithPackageKey k)
instance Data.Hashable.Class.Hashable k => Data.Hashable.Class.Hashable (NvFetcher.Types.WithPackageKey k)
instance GHC.Classes.Eq k => GHC.Classes.Eq (NvFetcher.Types.WithPackageKey k)
instance GHC.Show.Show (NvFetcher.Types.FetchResult k) => GHC.Show.Show (NvFetcher.Types.NixFetcher k)
instance GHC.Classes.Eq (NvFetcher.Types.FetchResult k) => GHC.Classes.Eq (NvFetcher.Types.NixFetcher k)
instance GHC.Classes.Ord (NvFetcher.Types.FetchResult k) => GHC.Classes.Ord (NvFetcher.Types.NixFetcher k)
instance Data.Hashable.Class.Hashable (NvFetcher.Types.FetchResult k) => Data.Hashable.Class.Hashable (NvFetcher.Types.NixFetcher k)
instance Data.Binary.Class.Binary (NvFetcher.Types.FetchResult k) => Data.Binary.Class.Binary (NvFetcher.Types.NixFetcher k)
instance Control.DeepSeq.NFData (NvFetcher.Types.FetchResult k) => Control.DeepSeq.NFData (NvFetcher.Types.NixFetcher k)
instance GHC.Show.Show k => GHC.Show.Show (NvFetcher.Types.WithPackageKey k)
instance GHC.Show.Show NvFetcher.Types.VersionChange
instance Data.Aeson.Types.FromJSON.FromJSON NvFetcher.Types.NvcheckerA
instance GHC.Show.Show NvFetcher.Types.VersionSortMethod
instance Data.Default.Class.Default NvFetcher.Types.VersionSortMethod


-- | Lenses for <a>NvFetcher.Types</a>
module NvFetcher.Types.Lens
sortVersionKey :: Lens' ListOptions (Maybe VersionSortMethod)
includeRegex :: Lens' ListOptions (Maybe Text)
ignored :: Lens' ListOptions (Maybe Text)
excludeRegex :: Lens' ListOptions (Maybe Text)
toPattern :: Lens' NvcheckerOptions (Maybe Text)
stripPrefix :: Lens' NvcheckerOptions (Maybe Text)
fromPattern :: Lens' NvcheckerOptions (Maybe Text)
vurl :: Traversal' VersionSource Text
vbranch :: Traversal' VersionSource Branch
repology :: Traversal' VersionSource Text
repo :: Traversal' VersionSource Text
regex :: Traversal' VersionSource Text
pypi :: Traversal' VersionSource Text
owner :: Traversal' VersionSource Text
manual :: Traversal' VersionSource Text
listOptions :: Traversal' VersionSource ListOptions
aur :: Traversal' VersionSource Text
archpkg :: Traversal' VersionSource Text
sha256 :: forall k_aaup k_ayns. Lens (NixFetcher k_aaup) (NixFetcher k_ayns) (FetchResult k_aaup) (FetchResult k_ayns)
rev :: forall k_aaup. Traversal' (NixFetcher k_aaup) Version
leaveDotGit :: forall k_aaup. Traversal' (NixFetcher k_aaup) Bool
furl :: forall k_aaup. Lens' (NixFetcher k_aaup) Text
fetchSubmodules :: forall k_aaup. Traversal' (NixFetcher k_aaup) Bool
deepClone :: forall k_aaup. Traversal' (NixFetcher k_aaup) Bool
pversion :: Lens' Package NvcheckerQ
pname :: Lens' Package PackageName
pfetcher :: Lens' Package PackageFetcher
pextract :: Lens' Package PackageExtractSrc
pcargo :: Lens' Package (Maybe PackageCargoFilePath)


-- | This module is about global information we use in rules.
module NvFetcher.Types.ShakeExtras

-- | Values we use during the build. It's stored in <a>shakeExtra</a>
data ShakeExtras
ShakeExtras :: Var [VersionChange] -> Map PackageKey Package -> Int -> ShakeExtras
[versionChanges] :: ShakeExtras -> Var [VersionChange]
[targetPackages] :: ShakeExtras -> Map PackageKey Package
[retries] :: ShakeExtras -> Int

-- | Create an empty <a>ShakeExtras</a> from packages to build and times to
--   retry for each rule
initShakeExtras :: Map PackageKey Package -> Int -> IO ShakeExtras

-- | Get our values from shake
getShakeExtras :: Action ShakeExtras

-- | Find a package given its key
lookupPackage :: PackageKey -> Action (Maybe Package)

-- | Get keys of all packages to build
getAllPackageKeys :: Action [PackageKey]

-- | Check if we need build this package
isPackageKeyTarget :: PackageKey -> Action Bool

-- | Record version change of a package
recordVersionChange :: PackageName -> Maybe Version -> Version -> Action ()

-- | Get version changes since the last run
getVersionChanges :: Action [VersionChange]

-- | Run an action, retry at most <a>retries</a> times if it throws an
--   exception
withRetries :: Action a -> Action a


-- | <a>NixFetcher</a> is used to describe how to fetch package sources.
--   
--   There are two types of fetchers overall:
--   
--   <ol>
--   <li><a>FetchGit</a> -- nix-prefetch-git</li>
--   <li><a>FetchUrl</a> -- nix-prefetch-url</li>
--   </ol>
--   
--   As you can see the type signature of <a>prefetch</a>: a fetcher will
--   be filled with the fetch result (hash) after the prefetch.
module NvFetcher.NixFetcher

-- | If the package is prefetched, then we can obtain the SHA256
data NixFetcher (k :: FetchStatus)
FetchGit :: Text -> Version -> Bool -> Bool -> Bool -> FetchResult k -> NixFetcher (k :: FetchStatus)
[_furl] :: NixFetcher (k :: FetchStatus) -> Text
[_rev] :: NixFetcher (k :: FetchStatus) -> Version
[_deepClone] :: NixFetcher (k :: FetchStatus) -> Bool
[_fetchSubmodules] :: NixFetcher (k :: FetchStatus) -> Bool
[_leaveDotGit] :: NixFetcher (k :: FetchStatus) -> Bool
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult k
FetchUrl :: Text -> FetchResult k -> NixFetcher (k :: FetchStatus)
[_furl] :: NixFetcher (k :: FetchStatus) -> Text
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult k

-- | Fetch status
data FetchStatus
Fresh :: FetchStatus
Fetched :: FetchStatus

-- | Prefetched fetchers hold hashes
type family FetchResult (k :: FetchStatus)

-- | Rules of nix fetcher
prefetchRule :: Rules ()

-- | Run nix fetcher
prefetch :: NixFetcher Fresh -> Action (NixFetcher Fetched)

-- | Create a fetcher from github repo
gitHubFetcher :: (Text, Text) -> PackageFetcher

-- | Create a fetcher from pypi
pypiFetcher :: Text -> PackageFetcher

-- | Create a fetcher from github release
gitHubReleaseFetcher :: (Text, Text) -> Text -> PackageFetcher

-- | Create a fetcher from git url
gitFetcher :: Text -> PackageFetcher

-- | Create a fetcher from url
urlFetcher :: Text -> NixFetcher Fresh


-- | This module mainly contains two things: <a>PackageSet</a> and
--   <a>PkgDSL</a>. NvFetcher accepts the former one -- a set of packages
--   to produce nix sources expr; the later one is used to construct a
--   single package.
--   
--   There are many combinators for defining packages. See the
--   documentation of <a>define</a> for example.
module NvFetcher.PackageSet

-- | Atomic terms of package set
data PackageSetF f

-- | Package set is a monad equipped with two capabilities:
--   
--   <ol>
--   <li>Carry defined packages</li>
--   <li>Run IO actions</li>
--   </ol>
--   
--   Package set is evaluated be for shake runs. Use <a>newPackage</a> to
--   add a new package, <a>liftIO</a> to run an IO action.
type PackageSet = Free PackageSetF

-- | Add a package to package set
newPackage :: PackageName -> NvcheckerQ -> PackageFetcher -> PackageExtractSrc -> Maybe PackageCargoFilePath -> PackageSet ()

-- | Add a list of packages into package set
purePackageSet :: [Package] -> PackageSet ()

-- | Run package set into a set of packages
--   
--   Throws exception as more then one packages with the same name are
--   defined
runPackageSet :: PackageSet () -> IO (Map PackageKey Package)

-- | A tagless final style DSL for constructing packages
class PkgDSL f
new :: PkgDSL f => f PackageName -> f (Prod '[PackageName])
andThen :: PkgDSL f => f (Prod r) -> f a -> f (Prod (a : r))
end :: (PkgDSL f, Member PackageName r, Member VersionSource r, Member PackageFetcher r, OptionalMember PackageExtractSrc r, OptionalMember PackageCargoFilePath r, OptionalMember NvcheckerOptions r) => f (Prod r) -> f ()

-- | <a>PkgDSL</a> version of <a>newPackage</a>
--   
--   Example:
--   
--   <pre>
--   define $ package "nvfetcher-git" <a>sourceGit</a> "<a>https://github.com/berberman/nvfetcher"</a> <a>fetchGitHub</a> ("berberman", "nvfetcher")
--   </pre>
define :: (Member PackageName r, Member VersionSource r, Member PackageFetcher r, OptionalMember PackageExtractSrc r, OptionalMember PackageCargoFilePath r, OptionalMember NvcheckerOptions r) => PackageSet (Prod r) -> PackageSet ()

-- | Start chaining with the name of package to define
package :: PackageName -> PackageSet (Prod '[PackageName])

-- | Attach version sources
src :: PackageSet (Prod r) -> VersionSource -> PackageSet (Prod (VersionSource : r))

-- | Attach fetchers
fetch :: PackageSet (Prod r) -> PackageFetcher -> PackageSet (Prod (PackageFetcher : r))

-- | A synonym of <a>fetchGitHub</a> and <a>sourceGitHub</a>
fromGitHub :: PackageSet (Prod r) -> (Text, Text) -> PackageSet (Prod (PackageFetcher : (VersionSource : r)))

-- | A synonym of <a>fetchGitHub'</a> and <a>sourceGitHub</a>
fromGitHub' :: PackageSet (Prod r) -> (Text, Text, NixFetcher Fresh -> NixFetcher Fresh) -> PackageSet (Prod (PackageFetcher : (VersionSource : r)))

-- | A synonym of <a>fetchGitHub</a> and <a>sourceGitHubTag</a>
fromGitHubTag :: PackageSet (Prod r) -> (Text, Text, ListOptions -> ListOptions) -> PackageSet (Prod (PackageFetcher : (VersionSource : r)))

-- | A synonym of <a>fetchGitHub'</a> and <a>sourceGitHubTag</a>
fromGitHubTag' :: PackageSet (Prod r) -> (Text, Text, ListOptions -> ListOptions, NixFetcher Fresh -> NixFetcher Fresh) -> PackageSet (Prod (PackageFetcher : (VersionSource : r)))

-- | A synonym of <a>fetchPypi</a> and <a>sourcePypi</a>
fromPypi :: PackageSet (Prod r) -> Text -> PackageSet (Prod (PackageFetcher : (VersionSource : r)))

-- | This package follows the latest github release
sourceGitHub :: PackageSet (Prod r) -> (Text, Text) -> PackageSet (Prod (VersionSource : r))

-- | This package follows the a tag from github
sourceGitHubTag :: PackageSet (Prod r) -> (Text, Text, ListOptions -> ListOptions) -> PackageSet (Prod (VersionSource : r))

-- | This package follows the latest git commit
sourceGit :: PackageSet (Prod r) -> Text -> PackageSet (Prod (VersionSource : r))

-- | Similar to <a>sourceGit</a>, but allows to specify branch
sourceGit' :: PackageSet (Prod r) -> (Text, Text) -> PackageSet (Prod (VersionSource : r))

-- | This package follows the latest pypi release
sourcePypi :: PackageSet (Prod r) -> Text -> PackageSet (Prod (VersionSource : r))

-- | This package follows the version of an Aur package
sourceAur :: PackageSet (Prod r) -> Text -> PackageSet (Prod (VersionSource : r))

-- | This package follows the version of an Arch Linux package
sourceArchLinux :: PackageSet (Prod r) -> Text -> PackageSet (Prod (VersionSource : r))

-- | This package follows a pinned version
sourceManual :: PackageSet (Prod r) -> Text -> PackageSet (Prod (VersionSource : r))

-- | This package follows the version of a repology package
sourceRepology :: PackageSet (Prod r) -> (Text, Text) -> PackageSet (Prod (VersionSource : r))

-- | This package follows a version extracted from web page
sourceWebpage :: PackageSet (Prod r) -> (Text, Text, ListOptions -> ListOptions) -> PackageSet (Prod (VersionSource : r))

-- | This package follows a version extracted from http header
sourceHttpHeader :: PackageSet (Prod r) -> (Text, Text, ListOptions -> ListOptions) -> PackageSet (Prod (VersionSource : r))

-- | This package is fetched from a github repo
fetchGitHub :: PackageSet (Prod r) -> (Text, Text) -> PackageSet (Prod (PackageFetcher : r))

-- | This package is fetched from a github repo
--   
--   Similar to <a>fetchGitHub</a>, but allows a modifier to the fetcher.
--   For example, you can enable fetch submodules like:
--   
--   <pre>
--   define $ package "qliveplayer" <a>sourceGitHub</a> (<a>IsoaSFlus</a>, <a>QLivePlayer</a>) <a>fetchGitHub</a>` (<a>IsoaSFlus</a>, <a>QLivePlayer</a>, fetchSubmodules .~ True)
--   </pre>
fetchGitHub' :: PackageSet (Prod r) -> (Text, Text, NixFetcher Fresh -> NixFetcher Fresh) -> PackageSet (Prod (PackageFetcher : r))

-- | This package is fetched from a file in github release
fetchGitHubRelease :: PackageSet (Prod r) -> (Text, Text, Text) -> PackageSet (Prod (PackageFetcher : r))

-- | This package is fetched from pypi
fetchPypi :: PackageSet (Prod r) -> Text -> PackageSet (Prod (PackageFetcher : r))

-- | This package is fetched from git
fetchGit :: PackageSet (Prod r) -> Text -> PackageSet (Prod (PackageFetcher : r))

-- | This package is fetched from git
--   
--   Similar to <a>fetchGit</a>, but allows a modifier to the fetcher. See
--   <a>fetchGitHub'</a> for a concret example.
fetchGit' :: PackageSet (Prod r) -> (Text, NixFetcher Fresh -> NixFetcher Fresh) -> PackageSet (Prod (PackageFetcher : r))

-- | This package is fetched from url
fetchUrl :: PackageSet (Prod r) -> (Version -> Text) -> PackageSet (Prod (PackageFetcher : r))
extractSource :: PackageSet (Prod r) -> [FilePath] -> PackageSet (Prod (PackageExtractSrc : r))
hasCargoLock :: PackageSet (Prod r) -> FilePath -> PackageSet (Prod (PackageCargoFilePath : r))
tweakVersion :: PackageSet (Prod r) -> (NvcheckerOptions -> NvcheckerOptions) -> PackageSet (Prod (NvcheckerOptions : r))

-- | Simple HList
data Prod (r :: [Type])

-- | Project elements from <a>Prod</a>
class Member (a :: Type) (r :: [Type])

-- | Constraint for producing error messages
type family NotElem (x :: Type) (xs :: [Type]) :: Constraint

-- | The function <tt>coerce</tt> allows you to safely convert between
--   values of types that have the same representation with no run-time
--   overhead. In the simplest case you can use it instead of a newtype
--   constructor, to go from the newtype's concrete type to the abstract
--   type. But it also works in more complicated settings, e.g. converting
--   a list of newtypes to a list of concrete types.
--   
--   This function is runtime-representation polymorphic, but the
--   <tt>RuntimeRep</tt> type argument is marked as <tt>Inferred</tt>,
--   meaning that it is not available for visible type application. This
--   means the typechecker will accept <tt>coerce @Int @Age 42</tt>.
coerce :: forall (k :: RuntimeRep) (a :: TYPE k) (b :: TYPE k). Coercible a b => a -> b

-- | Lift a computation from the <a>IO</a> monad.
liftIO :: MonadIO m => IO a -> m a

-- | <a>&amp;</a> is a reverse application operator. This provides
--   notational convenience. Its precedence is one higher than that of the
--   forward application operator <a>$</a>, which allows <a>&amp;</a> to be
--   nested in <a>$</a>.
--   
--   <pre>
--   &gt;&gt;&gt; 5 &amp; (+1) &amp; show
--   "6"
--   </pre>
(&) :: a -> (a -> b) -> b
infixl 1 &

-- | (<a>.~</a>) assigns a value to the target. It's the same thing as
--   using (<a>%~</a>) with <a>const</a>:
--   
--   <pre>
--   l <a>.~</a> x = l <a>%~</a> <a>const</a> x
--   </pre>
--   
--   See <a>set</a> if you want a non-operator synonym.
--   
--   Here it is used to change 2 fields of a 3-tuple:
--   
--   <pre>
--   &gt;&gt;&gt; (0,0,0) &amp; _1 .~ 1 &amp; _3 .~ 3
--   (1,0,3)
--   </pre>
(.~) :: ASetter s t a b -> b -> s -> t
infixr 4 .~

-- | (<a>%~</a>) applies a function to the target; an alternative
--   explanation is that it is an inverse of <a>sets</a>, which turns a
--   setter into an ordinary function. <tt><a>mapped</a> <a>%~</a>
--   <a>reverse</a></tt> is the same thing as <tt><a>fmap</a>
--   <a>reverse</a></tt>.
--   
--   See <a>over</a> if you want a non-operator synonym.
--   
--   Negating the 1st element of a pair:
--   
--   <pre>
--   &gt;&gt;&gt; (1,2) &amp; _1 %~ negate
--   (-1,2)
--   </pre>
--   
--   Turning all <tt>Left</tt>s in a list to upper case:
--   
--   <pre>
--   &gt;&gt;&gt; (mapped._Left.mapped %~ toUpper) [Left "foo", Right "bar"]
--   [Left "FOO",Right "bar"]
--   </pre>
(%~) :: ASetter s t a b -> (a -> b) -> s -> t
infixr 4 %~

-- | (<a>^.</a>) applies a getter to a value; in other words, it gets a
--   value out of a structure using a getter (which can be a lens,
--   traversal, fold, etc.).
--   
--   Getting 1st field of a tuple:
--   
--   <pre>
--   (<a>^.</a> <a>_1</a>) :: (a, b) -&gt; a
--   (<a>^.</a> <a>_1</a>) = <a>fst</a>
--   </pre>
--   
--   When (<a>^.</a>) is used with a traversal, it combines all results
--   using the <a>Monoid</a> instance for the resulting type. For instance,
--   for lists it would be simple concatenation:
--   
--   <pre>
--   &gt;&gt;&gt; ("str","ing") ^. each
--   "string"
--   </pre>
--   
--   The reason for this is that traversals use <a>Applicative</a>, and the
--   <a>Applicative</a> instance for <a>Const</a> uses monoid concatenation
--   to combine “effects” of <a>Const</a>.
--   
--   A non-operator version of (<a>^.</a>) is called <tt>view</tt>, and
--   it's a bit more general than (<a>^.</a>) (it works in
--   <tt>MonadReader</tt>). If you need the general version, you can get it
--   from <a>microlens-mtl</a>; otherwise there's <a>view</a> available in
--   <a>Lens.Micro.Extras</a>.
(^.) :: s -> Getting a s a -> a
infixl 8 ^.

-- | (<a>?~</a>) is a version of (<a>.~</a>) that wraps the value into
--   <a>Just</a> before setting.
--   
--   <pre>
--   l ?~ b = l .~ Just b
--   </pre>
--   
--   It can be useful in combination with <a>at</a>:
--   
--   <pre>
--   &gt;&gt;&gt; Map.empty &amp; at 3 ?~ x
--   fromList [(3,x)]
--   </pre>
(?~) :: ASetter s t a (Maybe b) -> b -> s -> t
infixr 4 ?~
instance NvFetcher.PackageSet.PkgDSL NvFetcher.PackageSet.PackageSet
instance NvFetcher.PackageSet.NotElem x xs => NvFetcher.PackageSet.Member x (x : xs)
instance NvFetcher.PackageSet.NotElem x xs => NvFetcher.PackageSet.OptionalMember x (x : xs)
instance NvFetcher.PackageSet.OptionalMember x xs => NvFetcher.PackageSet.OptionalMember x (_y : xs)
instance NvFetcher.PackageSet.OptionalMember x '[]
instance NvFetcher.PackageSet.Member x xs => NvFetcher.PackageSet.Member x (_y : xs)
instance (TypeError ...) => NvFetcher.PackageSet.Member x '[]
instance Control.Monad.IO.Class.MonadIO NvFetcher.PackageSet.PackageSet
instance GHC.Base.Functor NvFetcher.PackageSet.PackageSetF


-- | <a>nvchecker</a> is a program checking new versions of packages. We
--   encode the checking process into shake build system, generating
--   configuration of nvchecker and calling it externally. Now we call
--   nvchecker for each <a>VersionSource</a>, which seems not to be
--   efficient, but it's tolerable when running in parallel.
--   
--   Meanwhile, we lose the capabilities of tracking version updates, i.e.
--   normally nvchecker will help us maintain a list of old versions, so
--   that we are able to know which package's version is updated in this
--   run. Fortunately, we can reimplement this using shake database, see
--   <a>nvcheckerRule</a> for details.
module NvFetcher.Nvchecker
data VersionSortMethod
ParseVersion :: VersionSortMethod
Vercmp :: VersionSortMethod

-- | Filter-like configuration for some version sources. See
--   <a>https://nvchecker.readthedocs.io/en/latest/usage.html#list-options</a>
--   for details.
data ListOptions
ListOptions :: Maybe Text -> Maybe Text -> Maybe VersionSortMethod -> Maybe Text -> ListOptions
[_includeRegex] :: ListOptions -> Maybe Text
[_excludeRegex] :: ListOptions -> Maybe Text
[_sortVersionKey] :: ListOptions -> Maybe VersionSortMethod
[_ignored] :: ListOptions -> Maybe Text

-- | The input of nvchecker
data NvcheckerQ
NvcheckerQ :: VersionSource -> NvcheckerOptions -> NvcheckerQ

-- | Configuration available for evey version sourece. See
--   <a>https://nvchecker.readthedocs.io/en/latest/usage.html#global-options</a>
--   for details.
data NvcheckerOptions
NvcheckerOptions :: Maybe Text -> Maybe Text -> Maybe Text -> NvcheckerOptions
[_stripPrefix] :: NvcheckerOptions -> Maybe Text
[_fromPattern] :: NvcheckerOptions -> Maybe Text
[_toPattern] :: NvcheckerOptions -> Maybe Text

-- | Upstream version source for nvchecker to check
data VersionSource
GitHubRelease :: Text -> Text -> VersionSource
[_owner] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
GitHubTag :: Text -> Text -> ListOptions -> VersionSource
[_owner] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions
Git :: Text -> Branch -> VersionSource
[_vurl] :: VersionSource -> Text
[_vbranch] :: VersionSource -> Branch
Pypi :: Text -> VersionSource
[_pypi] :: VersionSource -> Text
ArchLinux :: Text -> VersionSource
[_archpkg] :: VersionSource -> Text
Aur :: Text -> VersionSource
[_aur] :: VersionSource -> Text
Manual :: Text -> VersionSource
[_manual] :: VersionSource -> Text
Repology :: Text -> Text -> VersionSource
[_repology] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
Webpage :: Text -> Text -> ListOptions -> VersionSource
[_vurl] :: VersionSource -> Text
[_regex] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions
HttpHeader :: Text -> Text -> ListOptions -> VersionSource
[_vurl] :: VersionSource -> Text
[_regex] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions

-- | The result of running nvchecker
data NvcheckerA
NvcheckerA :: Version -> Maybe Version -> NvcheckerA
[nvNow] :: NvcheckerA -> Version

-- | nvchecker doesn't give this value, but shake restores it from last run
[nvOld] :: NvcheckerA -> Maybe Version

-- | Rules of nvchecker
nvcheckerRule :: Rules ()

-- | Run nvchecker
checkVersion :: VersionSource -> NvcheckerOptions -> PackageKey -> Action NvcheckerA


-- | This module contains a type class <a>ToNixExpr</a> and some its
--   instances associated with either Haskell primitive types or our
--   <a>NvFetcher.Types</a>.
module NvFetcher.NixExpr

-- | Nix expression
type NixExpr = Text

-- | Types can be converted into nix expr
class ToNixExpr a
toNixExpr :: ToNixExpr a => a -> NixExpr
instance NvFetcher.NixExpr.ToNixExpr (NvFetcher.Types.NixFetcher 'NvFetcher.Types.Fresh)
instance NvFetcher.NixExpr.ToNixExpr (NvFetcher.Types.NixFetcher 'NvFetcher.Types.Fetched)
instance NvFetcher.NixExpr.ToNixExpr GHC.Types.Bool
instance NvFetcher.NixExpr.ToNixExpr a => NvFetcher.NixExpr.ToNixExpr [a]
instance NvFetcher.NixExpr.ToNixExpr GHC.Base.String
instance NvFetcher.NixExpr.ToNixExpr NvFetcher.Types.NixExpr
instance NvFetcher.NixExpr.ToNixExpr NvFetcher.Types.Version
instance NvFetcher.NixExpr.ToNixExpr NvFetcher.Types.ExtractSrcQ


-- | This module provides function that extracs files contents from package
--   sources. It uses <a>IFD</a> under the hood, pulling <i>textual</i>
--   files from source drv. Because we use <tt>nix-instantiate</tt> to
--   build drv, so <tt><a>nixpkgs</a></tt> (<tt>NIX_PATH</tt>) is required.
module NvFetcher.ExtractSrc

-- | Extract file contents from package source e.g. <tt>Cargo.lock</tt>
data ExtractSrcQ
ExtractSrcQ :: NixFetcher Fetched -> [FilePath] -> ExtractSrcQ

-- | Rules of extract source
extractSrcRule :: Rules ()

-- | Run extract source
extractSrc :: NixFetcher Fetched -> [FilePath] -> Action (HashMap FilePath Text)


-- | This module provides function to calculate <tt>cargoLock</tt> used in
--   <tt>rustPlatform.buildRustPackage</tt>.
module NvFetcher.FetchRustGitDeps

-- | Fetch <tt>outputHashes</tt> for git dependencies in
--   <tt>Cargo.lock</tt>. See
--   <a>https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/rust.section.md#importing-a-cargolock-file</a>
--   for details. We need fetched source and the file path to
--   <tt>Cargo.lock</tt>.
data FetchRustGitDepsQ
FetchRustGitDepsQ :: NixFetcher Fetched -> FilePath -> FetchRustGitDepsQ

-- | Rules of fetch rust git dependencies
fetchRustGitDepsRule :: Rules ()

-- | Run fetch rust git dependencies
fetchRustGitDeps :: NixFetcher Fetched -> FilePath -> Action (HashMap Text Checksum)
instance GHC.Classes.Ord NvFetcher.FetchRustGitDeps.ParsedGitSrc
instance GHC.Classes.Eq NvFetcher.FetchRustGitDeps.ParsedGitSrc
instance GHC.Show.Show NvFetcher.FetchRustGitDeps.ParsedGitSrc
instance GHC.Classes.Ord NvFetcher.FetchRustGitDeps.RustDep
instance GHC.Classes.Eq NvFetcher.FetchRustGitDeps.RustDep
instance GHC.Show.Show NvFetcher.FetchRustGitDeps.RustDep


module NvFetcher.Core

-- | The key type of nvfetcher rule. See <a>NvFetcher.Core</a>
data Core
Core :: Core

-- | The core rule of nvchecker. all rules are wired here.
coreRules :: Rules ()

-- | Run the core rule. Given a <a>PackageKey</a>, run
--   <a>NvFetcher.Nvchecker</a>, <a>NvFetcher.NixFetcher</a> (may also run
--   <a>NvFetcher.ExtractSrc</a> or <a>FetchRustGitDeps</a>) resulting a
--   nix source snippet like:
--   
--   <pre>
--   feeluown-core = {
--       pname = "feeluown-core";
--       version = "3.7.7";
--       src = fetchurl {
--         sha256 = "06d3j39ff9znqxkhp9ly81lcgajkhg30hyqxy2809yn23xixg3x2";
--         url = "<a>https://pypi.io/packages/source/f/feeluown/feeluown-3.7.7.tar.gz";</a>
--       };
--     };
--   </pre>
generateNixSourceExpr :: PackageKey -> Action NixExpr


-- | The main module of nvfetcher. If you want to create CLI program with
--   it, it's enough to import only this module.
--   
--   Example:
--   
--   <pre>
--   module Main where
--   
--   import NvFetcher
--   
--   main :: IO ()
--   main = runNvFetcher defaultArgs packageSet
--   
--   packageSet :: PackageSet ()
--   packageSet = do
--     define $ package "feeluown-core" <a>fromPypi</a> "feeluown"
--     define $ package "qliveplayer" <a>fromGitHub</a> (<a>IsoaSFlus</a>, <a>QLivePlayer</a>)
--   </pre>
--   
--   You can find more examples of packages in <tt>Main_example.hs</tt>.
--   
--   Running the created program:
--   
--   <ul>
--   <li><tt>main</tt> -- abbreviation of <tt>main build</tt></li>
--   <li><tt>main build</tt> -- build nix sources expr from given
--   <tt>packageSet</tt></li>
--   <li><tt>main clean</tt> -- delete .shake dir and generated nix
--   file</li>
--   <li><tt>main -j</tt> -- build with parallelism</li>
--   </ul>
--   
--   All shake options are inherited.
module NvFetcher

-- | Arguments for running nvfetcher
data Args
Args :: ShakeOptions -> String -> FilePath -> Rules () -> Action () -> Action () -> Int -> Args

-- | Shake options
[argShakeOptions] :: Args -> ShakeOptions

-- | Build target
[argTarget] :: Args -> String

-- | Output file path
[argOutputFilePath] :: Args -> FilePath

-- | Custom rules
[argRules] :: Args -> Rules ()

-- | Action run after build rule
[argActionAfterBuild] :: Args -> Action ()

-- | Action run after clean rule
[argActionAfterClean] :: Args -> Action ()
[argRetries] :: Args -> Int

-- | Default arguments of <tt>defaultMain</tt>
--   
--   Output file path is <tt>sources.nix</tt>.
defaultArgs :: Args

-- | Entry point of nvfetcher
runNvFetcher :: Args -> PackageSet () -> IO ()
